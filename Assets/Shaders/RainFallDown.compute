#pragma kernel CSMain

struct RainPanel
{
    float3 normal;
    float3 binormal;
    float3 position;
};
float4 _Direction[3];	//x: right y: forward z: volume
RWStructuredBuffer<RainPanel> instancingBuffer; uint _InstancingBufferCount;
float _RandomNumber;
float2 _ShadowTextureResolution;
Texture2D<float> _ShadowTexture;
float4x4 _WorldToShadowMatrix;
float4 _CameraState;
float3 _CameraPos;
float3 _LookPos;
float _FallDownSpeed;
uint _Count;

#define RANDOM(seed) sin(cos(seed * _RandomNumber * 318.6818764 + 646.668164) * _RandomNumber * 134.616463197)
[numthreads(128,1,1)]
void CSMain (uint id : SV_DispatchThreadID)
{
	if(id > _Count)
	{
		return;
	}
	RainPanel panel = instancingBuffer[id];
	panel.position.y -= _FallDownSpeed;
	//Shadow Texture Decode
	float2 textureUV = mul(_WorldToShadowMatrix, float4(panel.position, 1)).xy * 0.5 + 0.5;
	textureUV *= _ShadowTextureResolution;
	float shadowDistance = _ShadowTexture[textureUV] * _CameraState.w;
	float objDistance = dot(_CameraState.xyz, panel.position - _CameraPos);
	if(shadowDistance < objDistance)
	{
		float random = RANDOM(id);
		panel.position = _CameraPos + _Direction[0].xyz * _Direction[2].x * random * 0.5;
		random = RANDOM(random);
		panel.position += _Direction[1].xyz * _Direction[2].z * random * 0.5;
	}
	//Billboard
	float3 faceDirection = panel.position - _LookPos;
	faceDirection.y = 0;
	panel.normal = normalize(faceDirection);
	panel.binormal = cross(float3(0,1,0), panel.normal);
	instancingBuffer[id] = panel;
}
