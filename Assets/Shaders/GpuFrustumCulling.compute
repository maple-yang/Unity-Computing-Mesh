// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CullMain
#include "UnityCG.cginc"
#define PLANECOUNT 6
float4 planes[PLANECOUNT];
RWStructuredBuffer<float4x4> objBuffer;
RWStructuredBuffer<uint> instanceCountBuffer;
RWStructuredBuffer<float4x4> Transforms;
RWStructuredBuffer<uint> allCountBuffer;
float3 _Extent;
uint _IndirectIndex;
inline float PlaneTest(float4x4 ObjectToWorld, float3 extent){
    float3 right = float3(ObjectToWorld._m00, ObjectToWorld._m10, ObjectToWorld._m20);
    float3 up = float3(ObjectToWorld._m01, ObjectToWorld._m11, ObjectToWorld._m21);
    float3 forward = float3(ObjectToWorld._m02, ObjectToWorld._m12, ObjectToWorld._m22);
    float3 position = float3(ObjectToWorld._m03, ObjectToWorld._m13, ObjectToWorld._m23);
    float result = 1;
    [unroll]
    for(int i = 0; i < PLANECOUNT; ++i)
    {
        float4 plane = planes[i];
        float r = dot(position, plane.xyz); 
        float3 absNormal = float3(abs(dot(plane.xyz, right)), abs(dot(plane.xyz, up)), abs(dot(plane.xyz, forward)));
        float f = dot(absNormal, extent);
        result *= ((r - f) < -plane.w) ? 1 : 0;
    }
    return result;
}
uint _Count;


[numthreads(128, 1, 1)]
void CullMain (uint id : SV_DispatchThreadID)
{
    if(id > _Count)
    {
        return;
    }
    float result =  PlaneTest(objBuffer[id], _Extent);
    if(result > 0.5){
        int currentCount;
        InterlockedAdd(instanceCountBuffer[_IndirectIndex], 1);
        InterlockedAdd(allCountBuffer[0], 1, currentCount);
        Transforms[currentCount] = objBuffer[id];
    }
}
